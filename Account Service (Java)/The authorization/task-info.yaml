type: edu
files:
  - name: src/account/AccountServiceApplication.java
    visible: true
    text: |
      package src.account;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class AccountServiceApplication {
      
          public static void main(String[] args) {
              SpringApplication.run(AccountServiceApplication.class, args);
          }
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/AccountServiceTest.java
    visible: false
    text: |-
      import account.AccountServiceApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import com.google.gson.JsonParser;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.springframework.http.HttpStatus;
      
      import java.util.*;
      import java.util.stream.Collectors;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestReq {
      
        private Map<String, Object> properties = new LinkedHashMap<>();
      
        // Deep copy
        public TestReq(TestReq another) {
          this.properties = another.properties.entrySet().stream()
                  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        }
      
        public TestReq() {
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this.properties);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
        public TestReq setProps(String key, Object value) {
          properties.put(key, value);
          return this;
        }
      
      }
      
      public class AccountServiceTest extends SpringTest {
      
        private  final String signUpApi = "/api/auth/signup";
        private  final String changePassApi = "/api/auth/changepass";
        private  final String getEmployeePaymentApi = "/api/empl/payment";
        private final String postPaymentApi = "/api/acct/payments";
        private final String putRoleApi = "/api/admin/user/role";
        private final String adminApi = "/api/admin/user/";
      
      
        static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
                "PasswordForApril", "PasswordForMay", "PasswordForJune",
                "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
                "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};
      
        List<Integer> userIdList = new ArrayList<>();
      
        private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
                .setProps("lastname", "Ivanov")
                .setProps("email", "IvanIvanov@acme.com")
                .setProps("password", "rXoa4CvqpLxW");
        private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
                .setProps("lastname", "Petrov")
                .setProps("email", "PetrPetrov@acme.com")
                .setProps("password", "nWza98hjkLPE");
        private final TestReq johnDoe = new TestReq().setProps("name", "John")
                .setProps("lastname", "Doe")
                .setProps("email", "JohnDoe@acme.com")
                .setProps("password", "oMoa3VvqnLxW");
        private final TestReq maxMus = new TestReq().setProps("name", "Max")
                .setProps("lastname", "Mustermann")
                .setProps("email", "MaxMustermann@acme.com")
                .setProps("password", "ai0y9bMvyF6G");
        private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
                .setProps("lastname", "Nemo")
                .setProps("email", "nautilus@pompilius.com")
                .setProps("password", "wings");
        private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
                .setProps("lastname", "Hoe")
                .setProps("email", "IvanHoe@acme.com")
                .setProps("password", "nWza98hjkLPE");
      
        private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
        private final String petrPetrovCorrectUser = petrPetrov.toJson();
        private final String ivanHoeCorrectUser = ivanHoe.toJson();
        private final String jDCorrectUser = johnDoe.toJson();
        private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
        private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
        private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
        private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
        private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
        private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
        private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
        private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
        private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
        private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
        private final String maxMusCorrectUser = maxMus.toJson();
        private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
        private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
        private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
        private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
        private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
        private final String captainNemoWrongUser = captainNemo.toJson();
        private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      
        private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
        private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
        private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();
      
        private String paymentsList = convert(new String[]{
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 654321).toJson(),
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 987).toJson(),
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 21).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 456789).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 12).toJson()
        });
        private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
        private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "11-2022").setProps("salary", -1).toJson()});
        private final String wrongPaymentListDuplicate = convert(new String[]{
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 456789).toJson()
        });
        private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                .setProps("salary", 77777).toJson();
        private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
        private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
        private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "11-2022").setProps("salary", -1).toJson();
        private final String correctPaymentResponse = convert(new String[]{
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
        });
        private final String correctPaymentResponseIvanov = convert(new String[]{
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
        });
        private final String firstResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                        .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
        private final String secondResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
        private final String thirdResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").
                        setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
        });
        private final String fourthResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                        .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
      
        public AccountServiceTest() {
          super(AccountServiceApplication.class, "../service_db.mv.db");
        }
      
        private String convert(String[] trs) {
          JsonArray  jsonArray = new JsonArray();
          for (String tr : trs) {
            JsonElement jsonObject = JsonParser.parseString(tr);
            jsonArray.add(jsonObject);
          }
          return jsonArray.toString();
        }
      
      
        CheckResult testApi(String user, String body, int status, String api, String method, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, api, method, message);
      
          return CheckResult.correct();
        }
      
        /**
         * Method for checking response on Post request for signup API
         *
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostSignUpResponse(String body, int status, String[] role) {
      
          HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");
      
          JsonObject rightResponse = getJson(body).getAsJsonObject();
          rightResponse.remove("password");
      
          // Check is it JSON in response or something else
          if (!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
      
          }
      
          JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
          // Check if password is presence in response
          if (jsonResponse.get("password") != null) {
            return CheckResult.wrong("You must remove password from response\n" +
                    jsonResponse);
          }
      
          if (jsonResponse.get("id") == null) {
            return CheckResult.wrong("Response must contain user ID\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
          // Check JSON in response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", rightResponse.get("name").getAsString())
                          .value("lastname", rightResponse.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                          .value("roles", role));
      
          if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
            return CheckResult.wrong("User ID must be unique!\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
          userIdList.add(jsonResponse.get("id").getAsInt());
          return CheckResult.correct();
        }
      
        /**
         * Method for check the prohibition of requests specified types
         *
         * @param api testing api (String)
         * @param deniedMethods list of prohibited type requests
         * @param body string representation of body content in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {
      
          HttpRequest getReq = get(api);
          HttpRequest postReq = post(api, body);
          HttpRequest putReq = put(api, body);
          HttpRequest deleteReq = delete(api);
      
          Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
            put("get", getReq);
            put("post", postReq);
            put("put", putReq);
            put("delete", deleteReq);
          }};
      
          for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
            if (deniedMethods.contains(entry.getKey())) {
              HttpResponse response = entry.getValue().send();
              if (response.getStatusCode() != 405) {
                return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                        "405, responded: " + response.getStatusCode());
              }
            }
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
          try {
            reloadSpring();
          } catch (Exception ex) {
            throw new UnexpectedError(ex.getMessage());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking authentication
         *
         * @param user string representation of user information in JSON format (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserRegistration(String user, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);
      
          return CheckResult.correct();
        }
      
        CheckResult testChangePassword(String api, String body, int status, String user) {
          JsonObject userJson = getJson(user).getAsJsonObject();
      
          HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");
      
          // Check JSON in response
          if (status == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("email", userJson.get("email").getAsString().toLowerCase())
                            .value("status", "The password has been updated successfully"));
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing duplicate users
         *
         * @param user string representation of user information in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserDuplicates(String user) {
          HttpResponse response = post(signUpApi, user).send();
          // Check error message field in JSON response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "User exist!")
                          .anyOtherValues());
          return CheckResult.correct();
        }
      
        private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
          JsonObject json = getJson(body).getAsJsonObject();
          HttpResponse response;
          for (int index = 0; index < breachedPass.length; index++) {
            if (json.has("password")) {
              json.remove("password");
              json.addProperty("password", breachedPass[index]);
            } else if (json.has("new_password")) {
              json.remove("new_password");
              json.addProperty("new_password", breachedPass[index]);
            }
            if (login.isEmpty() || password.isEmpty()) {
              response = post(api, json.toString()).send();
            } else {
              response = post(api, json.toString()).basicAuth(login, password).send();
            }
      
            if (response.getStatusCode() != 400) {
              return CheckResult.wrong("POST " + api + " should respond with "
                      + "status code 400 , responded: " + response.getStatusCode() + "\n"
                      + "Response body:\n" + response.getContent() + "\n"
                      + "Request body:\n" + json.toString() + "\n"
                      + message);
            }
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", 400)
                            .value("error", "Bad Request")
                            .value("message", "The password is in the hacker's database!")
                            .anyOtherValues());
      
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testPostPaymentResponse(String user, String body, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Added successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutPaymentResponse(String user, String body, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Updated successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);
      
          JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
          JsonArray responseJson = null;
          try {
            responseJson = getJson(response.getContent()).getAsJsonArray();
          } catch (Exception e) {
              return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                      response.getContent().getClass());
          }
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          if (responseJson.isEmpty())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (correctJson.size() != responseJson.size()) {
            return CheckResult.wrong("New data should not be added" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              if (!responseJson.get(i).equals(correctJson.get(i))) {
                return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                        + "in response " + getPrettyJson(responseJson) + "\n"
                        + "must be " + getPrettyJson(correctJson));
              }
            }
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          JsonObject json = getJson(correctResponse).getAsJsonObject();
          JsonObject jsonRequest = getJson(request).getAsJsonObject();
          String param = jsonRequest.get("period").getAsString();
          HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
          if (response.getStatusCode() != status) {
            throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            if (!response.getJson().equals(json)) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                      + " wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(response.getJson()) + "\n"
                      + "must be " + getPrettyJson(json));
            }
          }
      
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/empl/payment")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
      
      
          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("Wrong dataa in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
              for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
                roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
              }
              expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                      .check(isObject()
                              .value("id", isInteger())
                              .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                              .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                              .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                              .value("roles", isArray( roles )));
            }
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                       String answer, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status.value(),
                  api + param, "DELETE", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("user", param.toLowerCase())
                            .value("status", answer));
          }
      
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api + param)
                            .value("status", status.value())
                            .value("message", answer)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                    String role, String operation, String[] respRoles, String message) {
      
          JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
          JsonObject request = new JsonObject();
          request.addProperty("user", jsonUser.get("email").getAsString());
          request.addProperty("operation", operation);
          request.addProperty("role", role);
      
          HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", jsonUser.get("name").getAsString())
                            .value("lastname", jsonUser.get("lastname").getAsString())
                            .value("email", jsonUser.get("email").getAsString().toLowerCase())
                            .value("roles", isArray(respRoles)));
          }
      
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api)
                            .value("status", status.value())
                            .value("message", respRoles[0])
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);
      
          // Check JSON in response
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api)
                            .value("status", status.value())
                            .value("message", "Access Denied!")
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing api response
         *
         * @param user string representation of user information in JSON format (String)
         * @param body request body (String)
         * @param status expected response status (int)
         * @param api testing api (String)
         * @param method method for api (String)
         * @param message test hints for student (String)
         * @return response (HttpResponse)
         */
        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method, String message) {
          HttpRequest request = null;
          switch (method) {
            case "GET":
              request = get(api);
              break;
            case "POST":
              request = post(api, body);
              break;
            case "PUT":
              request = put(api, body);
              break;
            case "DELETE":
              request = delete(api);
              break;
          }
      
          if (user != null) {
            JsonObject userJson = getJson(user).getAsJsonObject();
            String password = userJson.get("password").getAsString();
            String login = userJson.get("email").getAsString().toLowerCase();
            request = request.basicAuth(login, password);
          }
          HttpResponse response = request.send();
      
          if (response.getStatusCode() != status) {
            throw new WrongAnswer(method + " " + api  + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
          return response;
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[] {
      
                // Testing user registration negative tests
                () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
                () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
                () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
                () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
                () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
                () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
                () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
                () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
                () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
                () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
                () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                        "Sending password from breached list"), // 11
      
                // Testing user registration positive tests
                () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
                () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
                () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
                () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15
      
      //          // Testing user registration negative tests
                () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
                () -> testUserDuplicates(jDCorrectUser), // 17
                () -> testApi(null, jDLower, 400, signUpApi, "POST",
                        "User must be unique (ignorecase)!"), // 18
      
      //
      //          // Test authentication, positive tests
                () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
                () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
      //
      //          // Test authentication, negative tests
                () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
                () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
                () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
                () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                        "This api only for authenticated user"), // 24
      //
      //          // Testing changing password
                () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                        "This api only for authenticated user"), // 25
                () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                        "The password length must be at least 12 chars!"), // 26
                () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                        "The passwords must be different!"), // 27
                () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                        jDDuplicatePass, "Sending password from breached list"), // 28
                () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
                () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                        "Password must be changed!"), // 30
                () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                        "Password must be changed!"), // 31
      
                // Testing persistence
                () -> restartApplication(), // 32
                () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                        " Check persistence."), // 33
      
                // Testing admin functions
                // Delete user
                () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                        "Api must be available only to admin user"), // 34
                () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                        "Api must be available only to admin user"), // 35
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        firstResponseAdminApi, "Api must be available to admin user"), // 36
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                        "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "User must be deleted!"), // 38
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                        jDNewPass, "johndoe@acme.com",
                        "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                        jDNewPass, "johndoe@goole.com",
                        "User not found!", "Trying to delete non existing user"), // 40
                () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
                () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                        "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44
      
                // Testing persistence
                () -> restartApplication(), // 45
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "User must be deleted!"), // 46
      
      
      
                // Changing roles
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                        new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        thirdResponseAdminApi, "Role must be changed!"), // 48
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"ROLE_USER"}, ""),
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "Role must be changed!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                        new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),
      
                // Testing admin functions, negative tests
                () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                        ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                        new String[] {"Role not found!"}, "Trying add not existing role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                        new String[] {"The user cannot combine administrative and business roles!"},
                        "Trying add administrative role to business user!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        jDNewPass, "USER", "GRANT",
                        new String[] {"The user cannot combine administrative and business roles!"},
                        "Trying add business role to administrator!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        jDNewPass, "ADMINISTRATOR", "REMOVE",
                        new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        maxMusCorrectUser, "USER", "REMOVE",
                        new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                        captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"User not found!"}, "Trying remove role from non existing user!"),
      
                // Testing role model negative case
                () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"),
                () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"),
                () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"),
                () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                        "", "Trying to access business endpoint with administrative user"),
                () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                        "", "Trying to access endpoint with wrong role"),
                () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                        "", "Trying to access business endpoint with administrative user"),
      
                // Testing business logic
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                        "Wrong status code!"),
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
                () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                        "Salary must be update!"),
                () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                        "Wrong date in request!"),
        };
      
      }
    learner_created: false
  - name: src/account/businesslayer/dto/PaymentPostedDto.java
    visible: true
    text: |
      package account.businesslayer.dto;
      
      import jakarta.validation.constraints.NotBlank;
      
      public record PaymentPostedDto(@NotBlank String status) {
      
      }
    learner_created: true
  - name: src/account/businesslayer/SecurityConfig.java
    visible: true
    text: |
      package account.businesslayer;
      
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.web.SecurityFilterChain;
      
      import java.util.List;
      
      @Configuration
      public class SecurityConfig {
      
          @Autowired
          RestAuthenticationEntryPoint restAuthenticationEntryPoint;
      
          public SecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
              this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
          }
      
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              http.httpBasic(Customizer.withDefaults())
                  .formLogin(Customizer.withDefaults())
                  .exceptionHandling(e -> e.authenticationEntryPoint(restAuthenticationEntryPoint))
                  .csrf(cfg -> cfg.disable())
                  .headers(cfg -> cfg.frameOptions().disable())
                  .authorizeHttpRequests(
                      matcherRegistry ->
                          matcherRegistry
                              .requestMatchers(HttpMethod.GET, "/api/empl/payment").authenticated()
                              .requestMatchers(HttpMethod.POST, "/api/auth/changepass").authenticated()
                              .anyRequest().permitAll())
                  .sessionManagement(
                      sessions -> sessions.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
              return http.build();
          }
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/UserExistsException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class UserExistsException extends RuntimeException {
      
          public UserExistsException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/account/presentationlayer/PaymentController.java
    visible: true
    text: |
      package account.presentationlayer;
      
      import account.businesslayer.PaymentService;
      import account.businesslayer.UserAdapter;
      import account.businesslayer.dto.PaymentDto;
      import account.businesslayer.dto.PaymentPostedDto;
      import account.businesslayer.request.PaymentAddRequest;
      import jakarta.validation.Valid;
      import jakarta.validation.constraints.NotEmpty;
      import jakarta.validation.constraints.Pattern;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.annotation.AuthenticationPrincipal;
      import org.springframework.web.bind.annotation.*;
      
      import java.text.ParseException;
      import java.util.List;
      import java.util.Optional;
      
      @RestController
      public class PaymentController {
      
          @Autowired
          PaymentService paymentService;
      
          public PaymentController (PaymentService paymentService){
              this.paymentService = paymentService;
          }
      
          @GetMapping(path = "/api/empl/payment")
          public ResponseEntity<?> getPayment (
              @RequestParam(required = false) @Pattern(regexp = "(0[1-9]|1[1,2])-(19|20)\\d{2}") Optional<String> period,
              @AuthenticationPrincipal UserAdapter user) throws ParseException {
      
              if (period.isPresent()) {
                  PaymentDto payment = paymentService.handleGetPayment(period.get(), user);
                  return ResponseEntity.ok()
                      .contentType(MediaType.APPLICATION_JSON)
                      .body(payment);
              }
      
              PaymentDto[] payments = paymentService.handleGetAllPayments(user);
              return ResponseEntity.ok()
                  .contentType(MediaType.APPLICATION_JSON)
                  .body(payments);
          }
      
          @PutMapping(path = "/api/acct/payments")
          public ResponseEntity<?> updatePayments(@RequestBody PaymentAddRequest payment) {
              paymentService.validatePaymentUpdate(payment);
              paymentService.updatePayment(payment);
              return ResponseEntity.ok()
                  .contentType(MediaType.APPLICATION_JSON)
                  .body(new PaymentPostedDto("Updated successfully!"));
          }
      
          @PostMapping(path = "/api/acct/payments")
          public ResponseEntity<?> addPayments(
              @NotEmpty(message = "Payments cannot be empty") @RequestBody List<@Valid PaymentAddRequest> payments) {
                  payments.forEach(paymentService::validatePaymentAdd);
                  payments.forEach(paymentService::postPayment);
                  return ResponseEntity.ok()
                      .contentType(MediaType.APPLICATION_JSON)
                      .body( new PaymentPostedDto("Added successfully!"));
          }
          //Only for authenticated users
          //Takes Period parameter
          //if no period parameter, method returns salary for each period as an array, in descending order
      
      
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/InvalidPaymentException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import io.micrometer.core.instrument.config.validate.Validated;
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(HttpStatus.BAD_REQUEST)
      public class InvalidPaymentException extends RuntimeException {
          public InvalidPaymentException(String message){super(message);}
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/PaymentExistsException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class PaymentExistsException extends RuntimeException {
          public PaymentExistsException(String message) {
              super(message);
          }
      
      }
    learner_created: true
  - name: src/account/businesslayer/dto/UserDto.java
    visible: true
    text: |
      package account.businesslayer.dto;
      
      import jakarta.validation.constraints.NotBlank;
      
      public record UserDto(
          @NotBlank Long id, @NotBlank String name, @NotBlank String lastname, @NotBlank String email) {
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/PaymentDoesNotExistException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class PaymentDoesNotExistException extends RuntimeException{
          public PaymentDoesNotExistException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/account/businesslayer/dto/UserAdapter.java
    visible: true
    text: |
      package account.businesslayer;
      
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      
      import java.util.Collection;
      
      public class UserAdapter implements UserDetails {
          private User user;
          private Long id;
          private String name;
          private String lastname;
          private String email;
      
          public UserAdapter() {
          }
      
          public UserAdapter(User user) {
              this.user = user;
              this.id = user.getId();
              this.name = user.getName();
              this.lastname = user.getLastName();
              this.email = user.getEmail();
          }
      
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              return null;
          }
      
          @Override
          public String getPassword() {
              return user.getPassword();
          }
      
          @Override
          public String getUsername() {
              return user.getEmail();
          }
      
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
      
          @Override
          public boolean isAccountNonLocked() {
              return true;
          }
      
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
      
          @Override
          public boolean isEnabled() {
              return true;
          }
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getLastName() {
              return lastname;
          }
      
          public void setLastname(String lastname) {
              this.lastname = lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public void setEmail(String email) {
              this.email = email;
          }
      }
    learner_created: true
  - name: src/account/businesslayer/RestAuthenticationEntryPoint.java
    visible: true
    text: |
      package account.businesslayer;
      
      import jakarta.servlet.ServletException;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import org.springframework.security.core.AuthenticationException;
      import org.springframework.security.web.AuthenticationEntryPoint;
      import org.springframework.stereotype.Component;
      
      import java.io.IOException;
      
      @Component
      public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
          @Override
          public void commence(
              HttpServletRequest request,
              HttpServletResponse response,
              AuthenticationException authException)
              throws IOException, ServletException {
              response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
          }
      }
    learner_created: true
  - name: src/account/businesslayer/entity/Payment.java
    visible: true
    text: |
      package account.businesslayer;
      
      import jakarta.persistence.*;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Pattern;
      import jakarta.validation.constraints.Positive;
      
      @Entity
      @Table(name = "payments")
      //@IdClass(PaymentId.class)
      public class Payment {
      
          @Id
          @GeneratedValue(strategy = GenerationType.AUTO)
          @Column(name="id")
          private Long id;
      
          @Column(name = "employee")
          @NotBlank
          private String employee;
      
          @Column(name = "period")
          @NotBlank
          @Pattern(regexp = "(0[1-9]|1[1,2])-(19|20)\\d{2}", message = "Invalid date!")
          private String period;
      
          @Column(name = "salary")
          private Long salary;
      
          public Payment(){}
      
          public Payment(String employee, String period, Long salary){
              this.employee = employee;
              this.period = period;
              this.salary = salary;
          }
      
          public String getEmployee() {
              return employee;
          }
      
          public void setEmployee(String employee) {
              this.employee = employee;
          }
      
          public String getPeriod() {
              return period;
          }
      
          public void setPeriod(String period) {
              this.period = period;
          }
      
          public Long getSalary() {
              return salary;
          }
      
          public void setSalary(Long salary) {
              this.salary = salary;
          }
      }
    learner_created: true
  - name: src/account/businesslayer/response/CustomErrorMessage.java
    visible: true
    text: |
      package account.businesslayer.response;
      
      import java.time.LocalDateTime;
      
      public class CustomErrorMessage {
          private LocalDateTime timestamp;
          private int status;
          private String error;
          private String message;
          private String path;
      
          public CustomErrorMessage(
              LocalDateTime timestamp, int status, String error, String message, String path) {
      
              this.timestamp = timestamp;
              this.status = status;
              this.error = error;
              this.message = message;
              this.path = path;
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
          public void setTimestamp(LocalDateTime timestamp) {
              this.timestamp = timestamp;
          }
      
          public int getStatus() {
              return status;
          }
      
          public void setStatus(int status) {
              this.status = status;
          }
      
          public String getError() {
              return error;
          }
      
          public void setError(String error) {
              this.error = error;
          }
      
          public String getMessage() {
              return message;
          }
      
          public void setMessage(String message) {
              this.message = message;
          }
      
          public String getPath() {
              return path;
          }
      
          public void setPath(String path) {
              this.path = path;
          }
      }
    learner_created: true
  - name: src/account/persistencelayer/PaymentRepository.java
    visible: true
    text: |+
      package account.persistencelayer;
      
      import account.businesslayer.Payment;
      import org.springframework.data.repository.CrudRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.List;
      import java.util.Optional;
      
      @Repository
      public interface PaymentRepository extends CrudRepository<Payment, Long> {
          boolean existsByEmployeeAndPeriod(String employee, String period);
          Optional<Payment> findByEmployeeAndPeriod(String employee, String period);
          List<Payment> findByEmployeeOrderByPeriodDesc(String employee);
      }
    
    learner_created: true
  - name: src/account/BreachedPasswords.java
    visible: true
    text: |
      package account;
      
      import org.springframework.context.annotation.Bean;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.stereotype.Component;
      
      import java.util.List;
      
      @Component
      public class BreachedPasswords {
      
          private final List<String> breachedPasswords;
      
          BCryptPasswordEncoder passwordEncoder() {
              return new BCryptPasswordEncoder(13);
          }
      
          public BreachedPasswords(List<String> breachedPasswords) {
              List<String> passwords = List.of(
                  "PasswordForJanuary",
                  "PasswordForFebruary",
                  "PasswordForMarch",
                  "PasswordForApril",
                  "PasswordForMay",
                  "PasswordForJune",
                  "PasswordForJuly",
                  "PasswordForAugust",
                  "PasswordForSeptember",
                  "PasswordForOctober",
                  "PasswordForNovember",
                  "PasswordForDecember"
              );
              this.breachedPasswords =  passwords.stream()
                  .map(password -> passwordEncoder().encode(password))
                  .toList();
          }
      
          public List<String> getBreachedPasswords() {
              return breachedPasswords;
          }
      }
    learner_created: true
  - name: src/account/businesslayer/entity/User.java
    visible: true
    text: |
      package account.businesslayer;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.persistence.*;
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Pattern;
      
      @Entity
      @Table(name = "users")
      public class User {
      
          @Id
          @GeneratedValue(strategy = GenerationType.AUTO)
          @Column(name = "id")
          private Long id;
      
          @Column(name = "name")
          @NotBlank(message = "name is blank")
          private String name;
      
          @Column(name = "lastname")
          @NotBlank(message = "last name is blank")
          private String lastname;
      
          @Column(name = "email")
          @NotBlank(message = "email is blank")
          @Email(message = "email address is invalid")
          @Pattern(regexp = "^(.+)@acme.com$")
          private String email;
      
          @Column(name = "password")
          @NotBlank(message = "password is blank")
          private String password;
      
          public User() {
          }
      
          public User(String name, String lastname, String email, String password) {
              this.name = name;
              this.lastname = lastname;
              this.email = email;
              this.password = password;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          @JsonProperty("lastname")
          public String getLastName() {
              return lastname;
          }
      
          public void setLastName(String lastname) {
              this.lastname = lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public void setEmail(String email) {
              this.email = email;
          }
      
          public Long getId() {
              return id;
          }
      
          public String getPassword() {
              return password;
          }
      
          public void setPassword(String password) {
              this.password = password;
          }
      }
    learner_created: true
  - name: src/account/persistencelayer/UserRepository.java
    visible: true
    text: |
      package account.persistencelayer;
      
      import account.businesslayer.User;
      import java.util.Optional;
      import org.springframework.data.repository.CrudRepository;
      import org.springframework.stereotype.Repository;
      
      @Repository
      public interface UserRepository extends CrudRepository<User, Long> {
        boolean existsByEmail(String email);
      
        Optional<User> findByEmail(String email);
      }
    learner_created: true
  - name: src/account/businesslayer/dto/PaymentDto.java
    visible: true
    text: |
      package account.businesslayer.dto;
      
      import jakarta.validation.constraints.NotBlank;
      
      public record PaymentDto( String name, String lastname, String period,  String salary) {
      }
    learner_created: true
  - name: src/account/businesslayer/dto/UpdateSuccessfulDto.java
    visible: true
    text: |
      package account.businesslayer.dto;
      
      import jakarta.validation.constraints.NotBlank;
      
      public record PasswordUpdateDto(@NotBlank String email, String status) {
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/InsufficientPasswordException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class InsufficientPasswordException extends RuntimeException {
      
          public InsufficientPasswordException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/account/businesslayer/request/PaymentAddRequest.java
    visible: true
    text: |
      package account.businesslayer.request;
      
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Pattern;
      import jakarta.validation.constraints.Positive;
      
      public record PaymentAddRequest(
          @NotBlank
          @Email
          String employee,
          @NotBlank
          @Pattern(regexp = "(0[1-9]|1[1,2])-(19|20)\\d{2}", message = "Invalid date!")
          String period,
          @Positive(message = "Salary cannot be negative!")
          Long salary){}
    learner_created: true
  - name: src/account/businesslayer/request/PasswordChangeRequest.java
    visible: true
    text: |
      package account.businesslayer.request;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.validation.constraints.NotBlank;
      
      public record PasswordChangeRequest(
          @NotBlank(message = "password is blank") @JsonProperty("new_password") String password) {
      }
    learner_created: true
  - name: src/account/businesslayer/PaymentService.java
    visible: true
    text: |
      package account.businesslayer;
      
      import account.businesslayer.dto.PaymentDto;
      import account.businesslayer.exceptions.InvalidPaymentException;
      import account.businesslayer.exceptions.PaymentDoesNotExistException;
      import account.businesslayer.exceptions.PaymentExistsException;
      import account.businesslayer.request.PaymentAddRequest;
      import account.persistencelayer.PaymentRepository;
      import account.persistencelayer.UserRepository;
      import jakarta.transaction.Transactional;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.stereotype.Service;
      
      import java.text.ParseException;
      import java.text.SimpleDateFormat;
      import java.util.Date;
      import java.util.List;
      
      @Service
      public class PaymentService {
      
          @Autowired
          PaymentRepository paymentRepository;
      
          @Autowired
          UserRepository userRepository;
      
          public PaymentService (PaymentRepository paymentRepository, UserRepository userRepository) {
              this.paymentRepository = paymentRepository;
              this.userRepository = userRepository;
          }
      
          public void validatePaymentAdd(PaymentAddRequest payment){
              validatePaymentAmount(payment);
              validateDuplicatePayment(payment);
              validateUserExists(payment.employee());
          }
      
          public void validatePaymentUpdate(PaymentAddRequest payment) {
              validatePaymentAmount(payment);
              validateUserExists(payment.employee());
          }
      
          private void validateUserExists(String employee) {
              if (!userRepository.existsByEmail(employee.toLowerCase())){
                  throw new UsernameNotFoundException("User does not exist!");
              }
          }
      
          public void validateDuplicatePayment (PaymentAddRequest payment) {
              if (paymentRepository.existsByEmployeeAndPeriod(payment.employee(), payment.period())) {
                  throw new PaymentExistsException("Cannot add duplicate payment");
              }
          }
      
          public void validatePaymentAmount(PaymentAddRequest payment) {
              if (payment.salary() < 0) throw new InvalidPaymentException("Salary cannot be negative!");
          }
      
          @Transactional
          public Payment postPayment (PaymentAddRequest payment) {
              Payment postedPayment = new Payment(payment.employee(), payment.period(), payment.salary());
              paymentRepository.save(postedPayment);
              return postedPayment;
          }
      
          @Transactional
          public Payment updatePayment (PaymentAddRequest payment) {
              Payment updatedPayment = paymentRepository.findByEmployeeAndPeriod(payment.employee(), payment.period())
                  .orElseThrow(() -> new PaymentDoesNotExistException("There is no existing payment to update!"));
      
              updatedPayment.setSalary(payment.salary());
              return updatedPayment;
          }
      
          public String formatPeriod (String period) {
              SimpleDateFormat originalFormat = new SimpleDateFormat("MM-yyyy");
              SimpleDateFormat targetFormat = new SimpleDateFormat("MMMM-yyyy");
              try {
                  Date date = originalFormat.parse(period);
                  return targetFormat.format(date);
              } catch (ParseException e) {
                  throw new RuntimeException(e);
              }
      
              /*DateFormat originalFormat = new SimpleDateFormat("MM-yyyy");
              DateFormat targetFormat = new SimpleDateFormat("MMMM-yyyy");
              Date date;
              try {
                  date = originalFormat.parse(period);
              } catch (ParseException e) {
                  throw new RuntimeException(e);
              }
              return targetFormat.format(date);*/
          }
      
          public String formatSalary(Long cents) {
              Long change = cents%100;
              Long dollars = (cents - change)/100;
              return dollars + " dollar(s) " + change + " cent(s)";
          }
      
          public PaymentDto handleGetPayment(String period, UserAdapter user) throws ParseException {
              validateUserExists(user.getEmail());
              Payment payment = paymentRepository.findByEmployeeAndPeriod(user.getEmail().toLowerCase(), period)
                  .orElseThrow(() -> new PaymentDoesNotExistException("Payment does not Exist!"));
              return new PaymentDto(user.getName(), user.getLastName(), formatPeriod(period), formatSalary(payment.getSalary()));
          }
      
          public PaymentDto[] handleGetAllPayments(UserAdapter user) throws ParseException{
              validateUserExists(user.getEmail());
              List<Payment> allPayments = paymentRepository.findByEmployeeOrderByPeriodDesc(user.getEmail().toLowerCase());
              List<PaymentDto> payments =  allPayments.stream()
                  .map(payment -> new PaymentDto(
                      user.getName(),
                      user.getLastName(),
                      formatPeriod(payment.getPeriod()),
                      formatSalary(payment.getSalary())))
                  .toList();
              return payments.toArray(new PaymentDto[0]);
          }
      
          private void validatePaymentExists(String period, UserAdapter user) {
              if (!paymentRepository.existsByEmployeeAndPeriod(user.getEmail().toLowerCase(), period)){
                  throw new PaymentDoesNotExistException("Pay period does not exist!");
              }
          }
      }
    learner_created: true
  - name: src/account/presentationlayer/UserController.java
    visible: true
    text: |
      package account.presentationlayer;
      
      import account.businesslayer.User;
      import account.businesslayer.UserAdapter;
      import account.businesslayer.UserService;
      import account.businesslayer.dto.PasswordUpdateDto;
      import account.businesslayer.dto.UserDto;
      import account.businesslayer.request.PasswordChangeRequest;
      import account.businesslayer.request.PaymentAddRequest;
      import account.businesslayer.request.UserRegistrationRequest;
      import jakarta.validation.Valid;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.annotation.AuthenticationPrincipal;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RestController;
      
      import java.util.List;
      
      @RestController
      public class UserController {
          @Autowired
          UserService userService;
      
          @PostMapping(path = "/api/auth/signup")
          public ResponseEntity<?> createUser(@Valid @RequestBody UserRegistrationRequest newUser) {
              userService.validateEmail(newUser.email());
              userService.validateNewPassword(newUser.password());
              User user = userService.register(newUser);
              return ResponseEntity.ok()
                  .contentType(MediaType.APPLICATION_JSON)
                  .body(new UserDto(user.getId(), user.getName(), user.getLastName(), user.getEmail()));
          }
      
         /* @GetMapping(path = "/api/empl/payment")
          public ResponseEntity<?> getUser(@AuthenticationPrincipal UserAdapter user) {
              return ResponseEntity.ok()
                  .contentType(MediaType.APPLICATION_JSON)
                  .body(new UserDto(user.getId(), user.getName(), user.getLastName(), user.getEmail()));
          }*/
      
          @PostMapping(path = "/api/auth/changepass")
          public ResponseEntity<?> changePass(
              @RequestBody PasswordChangeRequest newPassword, @AuthenticationPrincipal UserAdapter user) {
      
              userService.validatePasswordUpdate(newPassword.password(), user.getPassword());
              User updatedUser = userService.updatePassword(newPassword.password(), user);
      
              return ResponseEntity.ok()
                  .contentType(MediaType.APPLICATION_JSON)
                  .body(new PasswordUpdateDto(
                      updatedUser.getEmail(), "The password has been updated successfully")
                  );
          }
      
      
      }
    learner_created: true
  - name: src/account/businesslayer/UserService.java
    visible: true
    text: |
      package account.businesslayer;
      
      import account.BreachedPasswords;
      import account.businesslayer.exceptions.InsufficientPasswordException;
      import account.businesslayer.exceptions.UserExistsException;
      import account.businesslayer.request.UserRegistrationRequest;
      import account.persistencelayer.UserRepository;
      import jakarta.transaction.Transactional;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;
      import org.springframework.security.core.userdetails.UserDetails;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.stereotype.Service;
      
      import java.util.List;
      
      @Service
      public class UserService implements UserDetailsService {
      
          @Bean
          BCryptPasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(13); }
      
          @Autowired
          UserRepository userRepository;
      
          @Autowired
          BreachedPasswords breachedPasswords;
      
          public UserService(UserRepository userRepository, BreachedPasswords breachedPasswords) {
              this.userRepository = userRepository;
              this.breachedPasswords = breachedPasswords;
          }
      
          public void validateEmail(String email) {
              if (userRepository.existsByEmail(email.toLowerCase())) throw new UserExistsException("User exist!");
          }
      
          public void validatePasswordLength(String newPassword) {
              if (newPassword.length() < 12) {
                  throw new InsufficientPasswordException("Password length must be 12 chars minimum!");
              }
          }
      
          public void validateUniquePassword(String newPassword, String oldPassword) {
              if (passwordEncoder().matches(newPassword, oldPassword)) {
                  throw new InsufficientPasswordException("The passwords must be different!");
              }
          }
      
          public void validatePasswordBreached(String newPassword) {
              int i = 0;
              while (i < breachedPasswords.getBreachedPasswords().size()) {
                  if (passwordEncoder().matches(newPassword, breachedPasswords.getBreachedPasswords().get(i))) {
                      throw new InsufficientPasswordException("The password is in the hacker's database!");
                  }
                  i++;
              }
          }
      
          public void validateNewPassword(String newPassword) {
              validatePasswordLength(newPassword);
              validatePasswordBreached(newPassword);
          }
          public void validatePasswordUpdate(String newPassword, String oldPassword) {
              validatePasswordLength(newPassword);
              validateUniquePassword(newPassword, oldPassword);
              validatePasswordBreached(newPassword);
          }
      
          @Transactional
          public User register(UserRegistrationRequest newUser) {
              User user =
                  new User(
                      newUser.name(),
                      newUser.lastname(),
                      newUser.email().toLowerCase(),
                      passwordEncoder().encode(newUser.password()));
      
              userRepository.save(user);
              return user;
          }
      
          @Transactional
          public User updatePassword(String newPassword, UserAdapter user) {
      
              User updatedUser =
                  userRepository
                      .findByEmail(user.getEmail().toLowerCase())
                      .orElseThrow(() -> new UsernameNotFoundException(""));
      
              updatedUser.setPassword(passwordEncoder().encode(newPassword));
              userRepository.save(updatedUser);
              return updatedUser;
          }
      
          @Override
          public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
              User user =
                  userRepository
                      .findByEmail(email.toLowerCase())
                      .orElseThrow(() -> new UsernameNotFoundException(("")));
              return new UserAdapter(user);
          }
      }
    learner_created: true
  - name: src/account/businesslayer/request/UserRegistrationRequest.java
    visible: true
    text: |
      package account.businesslayer.request;
      
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Pattern;
      
      public record UserRegistrationRequest(
          @NotBlank String name,
          @NotBlank String lastname,
          @NotBlank @Email @Pattern(regexp = "^(.+)@acme.com$") String email,
          @NotBlank String password) {
      }
    learner_created: true
  - name: src/account/businesslayer/GlobalExceptionHandler.java
    visible: true
    text: |
      package account.businesslayer;
      
      import account.businesslayer.exceptions.InsufficientPasswordException;
      import account.businesslayer.exceptions.PaymentDoesNotExistException;
      import account.businesslayer.exceptions.PaymentExistsException;
      import account.businesslayer.exceptions.UserExistsException;
      import account.businesslayer.response.CustomErrorMessage;
      import jakarta.validation.ConstraintViolation;
      import jakarta.validation.ConstraintViolationException;
      import org.h2.command.dml.Set;
      import org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties;
      import org.springframework.http.HttpHeaders;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.HttpStatusCode;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import org.springframework.web.bind.annotation.ControllerAdvice;
      import org.springframework.web.bind.annotation.ExceptionHandler;
      import org.springframework.web.bind.annotation.ResponseStatus;
      import org.springframework.web.context.request.WebRequest;
      import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
      
      import java.time.LocalDateTime;
      
      @ControllerAdvice
      public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
      
          @Override
          protected ResponseEntity<Object> handleMethodArgumentNotValid(
              MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
              return new ResponseEntity<>(buildErrorMessage(extractValidationMessage(ex), request), status);
          }
      
          @ResponseStatus(HttpStatus.BAD_REQUEST)
          @ExceptionHandler(ConstraintViolationException.class)
          public ResponseEntity<CustomErrorMessage> handleConstraintViolationException(
              ConstraintViolationException ex, WebRequest request) {
              var violations = ex.getConstraintViolations();
              StringBuilder builder = new StringBuilder();
              String errorMessage = violations.stream()
                  .map(violation -> builder.append(" " + violation.getMessage()))
                  .toString();
              return new ResponseEntity<>(buildErrorMessage(errorMessage, request), HttpStatus.BAD_REQUEST);
          }
      
          @ExceptionHandler(InsufficientPasswordException.class)
          public ResponseEntity<CustomErrorMessage> handleInsufficientPasswordException(
              InsufficientPasswordException ex, HttpStatus status, WebRequest request) {
              return new ResponseEntity<>(buildErrorMessage(ex.getMessage(), request), status);
          }
      
          @ExceptionHandler(PaymentDoesNotExistException.class)
          public ResponseEntity<CustomErrorMessage> handlePaymentDoesNotExistException(
              PaymentDoesNotExistException ex, HttpStatus status, WebRequest request) {
              return new ResponseEntity<>(buildErrorMessage(ex.getMessage(), request), status);
          }
      
          @ExceptionHandler(UserExistsException.class)
          public ResponseEntity<CustomErrorMessage> handleUserExistsException(
              UserExistsException ex, HttpStatus status, WebRequest request) {
              return new ResponseEntity<>(buildErrorMessage(ex.getMessage(), request), status);
          }
      
          @ExceptionHandler(PaymentExistsException.class)
          public ResponseEntity<CustomErrorMessage> handlePaymentExistsException(
              PaymentExistsException ex, HttpStatus status, WebRequest request) {
              return new ResponseEntity<>(buildErrorMessage(ex.getMessage(), request), status);
          }
      
          private String extractValidationMessage(Exception ex) {
              String exceptionMessage = ex.getMessage();
              String[] messageParts = exceptionMessage.split(";");
              String validationMessage = messageParts[messageParts.length - 1];
              return validationMessage.trim().replaceAll("default message \\[|]]", "");
          }
      
          private CustomErrorMessage buildErrorMessage(String errorMessage, WebRequest request) {
              return new CustomErrorMessage(
                  LocalDateTime.now(),
                  HttpStatus.BAD_REQUEST.value(),
                  "Bad Request",
                  errorMessage,
                  request.getDescription(false).trim().replaceAll("uri=", ""));
          }
      
      }
    learner_created: true
  - name: src/account/businesslayer/entity/Authority.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/DataLoader.java
    visible: true
    learner_created: true
  - name: src/account/persistencelayer/AuthorityRepository.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/exceptions/AuthorizationViolationException.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/request/RoleChangeRequest.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/exceptions/NotFoundException.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/exceptions/InvalidChangeException.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/dto/UserDeletedDto.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/16605#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #47

    PUT /api/admin/user/role should respond with status code 200, responded: 404

    Response body:
    {
      &quot;timestamp&quot; : &quot;2024-03-11T13:46:46.295+00:00&quot;,
      &quot;status&quot; : 404,
      &quot;error&quot; : &quot;Not Found&quot;,
      &quot;message&quot; : &quot;Role not found!&quot;,
      &quot;path&quot; : &quot;/api/admin/user/role&quot;
    }
  time: "Mon, 11 Mar 2024 13:46:47 UTC"
record: -1
