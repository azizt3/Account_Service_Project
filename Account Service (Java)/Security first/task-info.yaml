type: edu
custom_name: Security first!
files:
  - name: src/account/AccountServiceApplication.java
    visible: true
    text: |
      package src.account;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class AccountServiceApplication {
      
          public static void main(String[] args) {
              SpringApplication.run(AccountServiceApplication.class, args);
          }
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/AccountServiceTest.java
    visible: false
    text: |-
      import account.AccountServiceApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.ArrayList;
      import java.util.LinkedHashMap;
      import java.util.List;
      import java.util.Map;
      import java.util.stream.Collectors;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestReq {
      
        private Map<String, String> properties = new LinkedHashMap<>();
      
        // Deep copy
        public TestReq(TestReq another) {
          this.properties = another.properties.entrySet().stream()
                  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        }
      
        public TestReq() {
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this.properties);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
        public TestReq setProps(String key, String value) {
          properties.put(key, value);
          return this;
        }
      
      }
      
      public class AccountServiceTest extends SpringTest {
      
        private  final String signUpApi = "/api/auth/signup";
        private  final String changePassApi = "/api/auth/changepass";
        private  final String paymentApi = "/api/empl/payment";
        private final TestReq johnDoe = new TestReq().setProps("name", "John")
                .setProps("lastname", "Doe")
                .setProps("email", "JohnDoe@acme.com")
                .setProps("password", "oMoa3VvqnLxW");
        private final TestReq maxMus = new TestReq().setProps("name", "Max")
                .setProps("lastname", "Mustermann")
                .setProps("email", "MaxMustermann@acme.com")
                .setProps("password", "ai0y9bMvyF6G");
        private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
                .setProps("lastname", "Nemo")
                .setProps("email", "nautilus@pompilius.com")
                .setProps("password", "wings");
      
        private final String jDCorrectUser = johnDoe.toJson();
        private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
        private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
        private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
        private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
        private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
        private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
        private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
        private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
        private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
        private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
        private final String maxMusCorrectUser = maxMus.toJson();
        private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
        private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
        private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
        private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
        private final String captainNemoWrongUser = captainNemo.toJson();
      
        private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      
        private final String jDShortPass1 = new TestReq().setProps("new_password", "o").toJson();
        private final String jDShortPass2 = new TestReq().setProps("new_password", "oM").toJson();
        private final String jDShortPass3 = new TestReq().setProps("new_password", "oMo").toJson();
        private final String jDShortPass4 = new TestReq().setProps("new_password", "oMoa").toJson();
        private final String jDShortPass5 = new TestReq().setProps("new_password", "oMoa3").toJson();
        private final String jDShortPass6 = new TestReq().setProps("new_password", "oMoa3V").toJson();
        private final String jDShortPass7 = new TestReq().setProps("new_password", "oMoa3Vv").toJson();
        private final String jDShortPass8 = new TestReq().setProps("new_password", "oMoa3Vvq").toJson();
        private final String jDShortPass9 = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
        private final String jDShortPass10 = new TestReq().setProps("new_password", "oMoa3Vvqno").toJson();
        private final String jDShortPass11 = new TestReq().setProps("new_password", "oMoa3VvqnoM").toJson();
      
      
        private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();
      
      
        static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
                "PasswordForApril", "PasswordForMay", "PasswordForJune",
                "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
                "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};
      
        List<Integer> userIdList = new ArrayList<>();
      
        public AccountServiceTest() {
          super(AccountServiceApplication.class, "../service_db.mv.db");
        }
      
        /**
         * Method for checking status code of response Post request for API
         *
         * @param api testing api (String)
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostApi(String api, String body, int status, String message) {
          HttpResponse response = post(api, body).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
          return CheckResult.correct();
        }
      
        CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
          HttpResponse response = post(api, body).basicAuth(login, pass).send();
      
          if (response.getStatusCode() == 404) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + "Endpoint not found!" + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking status code of response Get request for API
         *
         * @param api testing api (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testGetApi(String api, int status, String message) {
          HttpResponse response = get(api).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("GET " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message);
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking status code of response Get request for API
         *
         * @param api testing api (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @param login login
         * @param password password
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
          HttpResponse response = get(api).basicAuth(login, password).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("GET " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message);
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking response on Post request for signup API
         *
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostSignUpResponse(String body, int status) {
          HttpResponse response = post(signUpApi, body).send();
          testPostApi(signUpApi, body, status, "API must be available");
      
          JsonObject rightResponse = getJson(body).getAsJsonObject();
          rightResponse.remove("password");
      
          // Check is it JSON in response or something else
          if (!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
      
          }
      
          JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
          // Check if password is presence in response
          if (jsonResponse.get("password") != null) {
            return CheckResult.wrong("You must remove password from response\n" +
                    jsonResponse);
          }
      
          if (jsonResponse.get("id") == null) {
            return CheckResult.wrong("Response must contain user ID\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
      
          // Check JSON in response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", rightResponse.get("name").getAsString())
                          .value("lastname", rightResponse.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));
      
          if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
            return CheckResult.wrong("User ID must be unique!\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
          userIdList.add(jsonResponse.get("id").getAsInt());
          return CheckResult.correct();
        }
      
        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
          try {
            reloadSpring();
          } catch (Exception ex) {
            throw new UnexpectedError(ex.getMessage());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking authentication
         *
         * @param user string representation of user information in JSON format (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserRegistration(String user, int status, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          HttpResponse response = get(paymentApi).basicAuth(login, password).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("Get " + paymentApi + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Authentication with " + login + " / " + password);
          }
          // Check JSON in response
          if (status == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("id", isInteger())
                            .value("name", userJson.get("name").getAsString())
                            .value("lastname", userJson.get("lastname").getAsString())
                            .value("email", isString(s -> s.equalsIgnoreCase(userJson.get("email").getAsString()))));
          }
          return CheckResult.correct();
        }
      
        CheckResult testChangePassword(String api, String body, int status, String user, String answer) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String pass = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          HttpResponse response = post(api, body).basicAuth(login, pass).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
          // Check JSON in response
          if (status == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("email", userJson.get("email").getAsString().toLowerCase())
                            .value("status", answer));
          }
          if (status == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", 400)
                            .value("error", "Bad Request")
                            .value("message", answer)
                            .value("path", "/api/auth/changepass")
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing duplicate users
         *
         * @param user string representation of user information in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserDuplicates(String user) {
          HttpResponse response = post(signUpApi, user).send();
          // Check error message field in JSON response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "User exist!")
                          .anyOtherValues());
          return CheckResult.correct();
        }
      
        private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
          JsonObject json = getJson(body).getAsJsonObject();
          HttpResponse response;
          for (int index = 0; index < breachedPass.length; index++) {
            if (json.has("password")) {
              json.remove("password");
              json.addProperty("password", breachedPass[index]);
            } else if (json.has("new_password")) {
              json.remove("new_password");
              json.addProperty("new_password", breachedPass[index]);
            }
            if (login.isEmpty() || password.isEmpty()) {
              response = post(api, json.toString()).send();
            } else {
              response = post(api, json.toString()).basicAuth(login, password).send();
            }
      
            if (response.getStatusCode() != 400) {
              return CheckResult.wrong("POST " + api + " should respond with "
                      + "status code 400 , responded: " + response.getStatusCode() + "\n"
                      + "Response body:\n" + response.getContent() + "\n"
                      + "Request body:\n" + getPrettyJson(json) + "\n"
                      + message);
            }
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", 400)
                            .value("error", "Bad Request")
                            .value("message", "The password is in the hacker's database!")
                            .anyOtherValues());
      
          }
          return CheckResult.correct();
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[] {
      
                // Test wrong POST request for signup api
                () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"),
                () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"),
                () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"),
                () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"),
                () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"),
                () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"),
                () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"),
                () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"),
                () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"),
                () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"),
                // Test user registration on signup api
                // Test user registration on signup api
                () -> testBreachedPass(signUpApi, "", "",
                        jDCorrectUser, "Sending password from breached list"),
                () -> testPostSignUpResponse(jDCorrectUser, 200),
                () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"),
                () -> testUserDuplicates(jDCorrectUser),
                () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"),
                () -> testPostSignUpResponse(maxMusLower, 200),
                () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"),
                () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"),
                // Test authentication, positive tests
                () -> testUserRegistration(jDLower, 200, "User must login!"),
                () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"),
                () -> testUserRegistration(maxMusLower, 200, "User must login!"),
                () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"),
                // Test authentication, negative tests
                () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"),
                () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"),
                () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"),
                () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
                () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),
                // Test changing password
                () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"),
                () -> testChangePassword(changePassApi, jDShortPass1, 400, jDCorrectUser,
                        "Password length must be 12 chars minimum!"),
                () -> testChangePassword(changePassApi, jDDuplicatePass, 400, jDCorrectUser,
                        "The passwords must be different!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass1, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass2, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass3, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass4, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass5, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass6, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass7, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass8, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass9, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass10, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDShortPass11, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
                () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"),
                () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                        jDDuplicatePass, "Sending password from breached list"),
                // Test persistence
                () -> restartApplication(),
                () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                        " Check persistence."),
                () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser, "The password has been updated successfully"),
                () -> testGetApiAuth(paymentApi, 401,"JohnDoe@acme.com",
                        "oMoa3VvqnLxW", "Password must be changed!"),
                () -> testGetApiAuth(paymentApi, 200,"JohnDoe@acme.com",
                        "aNob5VvqzRtb", "Password must be changed!"),
                () -> testChangePassword(changePassApi, jDPass, 200, maxMusCorrectUser, "The password has been updated successfully"),
                () -> testGetApiAuth(paymentApi, 401,"MaxMustermann@acme.com",
                        "ai0y9bMvyF6G", "Password must be changed!"),
                () -> testGetApiAuth(paymentApi, 200,"MaxMustermann@acme.com",
                        "aNob5VvqzRtb", "Password must be changed!")
        };
      }
    learner_created: false
  - name: src/account/businesslayer/User.java
    visible: true
    text: |
      package account.businesslayer;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.persistence.*;
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Pattern;
      
      @Entity
      @Table(name = "users")
      public class User {
      
          @Id
          @GeneratedValue(strategy = GenerationType.AUTO)
          @Column(name = "id")
          private Long id;
      
          @Column(name = "name")
          @NotBlank(message = "name is blank")
          private String name;
      
          @Column(name = "lastname")
          @NotBlank (message = "last name is blank")
          private String lastname;
      
          @Column(name = "email")
          @NotBlank (message = "email is blank")
          @Email (message = "email address is invalid")
          @Pattern(regexp = "^(.+)@acme.com$")
          private String email;
      
      
          @Column(name = "password")
          @NotBlank (message = "password is blank")
          private String password;
      
          public User(){}
      
          public User(String name, String lastname, String email, String password){
              this.name = name;
              this.lastname = lastname;
              this.email = email;
              this.password = password;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
          @JsonProperty("lastname")
          public String getLastName() {
              return lastname;
          }
      
          public void setLastName(String lastname) {
              this.lastname = lastname.toLowerCase();
          }
      
          public String getEmail() {
              return email;
          }
      
          public void setEmail(String email) {
              this.email = email;
          }
      
          public Long getId() {
              return id;
          }
      
          public String getPassword() {
              return password;
          }
      
          public void setPassword(String password){
              this.password = password;
          }
      }
    learner_created: true
  - name: src/account/businesslayer/SecurityConfig.java
    visible: true
    text: |
      package account.businesslayer;
      
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.web.SecurityFilterChain;
      
      @Configuration
      public class SecurityConfig {
      
        @Autowired RestAuthenticationEntryPoint restAuthenticationEntryPoint;
      
        public SecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
          this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
        }
      
        @Bean
        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
          http.httpBasic(Customizer.withDefaults())
              .formLogin(Customizer.withDefaults())
              .exceptionHandling(e -> e.authenticationEntryPoint(restAuthenticationEntryPoint))
              .csrf(cfg -> cfg.disable())
              .headers(cfg -> cfg.frameOptions().disable())
              .authorizeHttpRequests(
                  matcherRegistry ->
                      matcherRegistry
                          .requestMatchers(HttpMethod.GET, "/api/empl/payment").authenticated()
                          .anyRequest()
                          .permitAll())
              .sessionManagement(
                  sessions -> sessions.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
          return http.build();
        }
      }
    learner_created: true
  - name: src/account/persistencelayer/UserRepository.java
    visible: true
    text: |
      package account.persistencelayer;
      
      import account.businesslayer.User;
      import org.springframework.data.repository.CrudRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.Optional;
      
      @Repository
      public interface UserRepository extends CrudRepository<User, Long> {
          boolean existsByEmail(String email);
          Optional<User> findByEmail(String email);
      
      }
    learner_created: true
  - name: src/account/businesslayer/InsufficientPasswordException.java
    visible: true
    text: |
      package account.businesslayer;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class InsufficientPasswordException extends RuntimeException {
      
          public InsufficientPasswordException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/account/businesslayer/PasswordChangeRequest.java
    visible: true
    text: |
      package account.businesslayer;
      
      import jakarta.validation.constraints.Min;
      import jakarta.validation.constraints.NotBlank;
      
      public class PasswordChangeRequest {
        @NotBlank
        @Min(value = 18)
        private String new_password;
      
        public PasswordChangeRequest(String new_password) {
          this.new_password = new_password;
        }
      
        public String getNew_password() {
          return new_password;
        }
      
        public void setNew_password(String new_password) {
          this.new_password = new_password;
        }
      }
    learner_created: true
  - name: src/account/businesslayer/UserDto.java
    visible: true
    text: |
      package account.businesslayer;
      
      import jakarta.validation.constraints.NotBlank;
      
      public record UserDto(
          @NotBlank Long id, @NotBlank String name, @NotBlank String lastname, @NotBlank String email) {}
    learner_created: true
  - name: src/account/businesslayer/UserAdapter.java
    visible: true
    text: |
      package account.businesslayer;
      
      import java.util.Collection;
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      
      public class UserAdapter implements UserDetails {
          private final User user;
          private Long id;
          private String name;
          private String lastname;
          private String email;
      
          public UserAdapter(User user) {
              this.user = user;
              this.id = user.getId();
              this.name = user.getName();
              this.lastname = user.getLastName();
              this.email = user.getEmail();
          }
      
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              return null;
          }
      
          @Override
          public String getPassword() {
              return user.getPassword();
          }
      
          @Override
          public String getUsername() {
              return user.getEmail();
          }
      
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
      
          @Override
          public boolean isAccountNonLocked() {
              return true;
          }
      
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
      
          @Override
          public boolean isEnabled() {
              return true;
          }
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getLastName() {
              return lastname;
          }
      
          public void setLastname(String lastname) {
              this.lastname = lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public void setEmail(String email) {
              this.email = email;
          }
      }
    learner_created: true
  - name: src/account/businesslayer/RestAuthenticationEntryPoint.java
    visible: true
    text: |
      package account.businesslayer;
      
      import jakarta.servlet.ServletException;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import java.io.IOException;
      import org.springframework.security.core.AuthenticationException;
      import org.springframework.security.web.AuthenticationEntryPoint;
      import org.springframework.stereotype.Component;
      
      @Component
      public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(
            HttpServletRequest request,
            HttpServletResponse response,
            AuthenticationException authException)
            throws IOException, ServletException {
          response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
      }
    learner_created: true
  - name: src/account/businesslayer/UserExistsException.java
    visible: true
    text: |
      package account.businesslayer;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class UserExistsException extends RuntimeException {
      
        public UserExistsException(String message) {
          super(message);
        }
      }
    learner_created: true
  - name: src/account/presentationlayer/UserController.java
    visible: true
    text: |
      package account.presentationlayer;
      
      import account.businesslayer.*;
      import jakarta.validation.Valid;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.annotation.AuthenticationPrincipal;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RestController;
      
      @RestController
      public class UserController {
        @Autowired UserService userService;
      
        @PostMapping(path = "/api/auth/signup")
        public ResponseEntity<?> createUser(@Valid @RequestBody UserRegistrationRequest newUser) {
          if (userService.emailExists(newUser.email())) {
            throw new UserExistsException("User exist!");
          }
          User user = userService.register(newUser);
          return ResponseEntity.ok()
              .contentType(MediaType.APPLICATION_JSON)
              .body(new UserDto(user.getId(), user.getName(), user.getLastName(), user.getEmail()));
        }
      
        @GetMapping(path = "/api/empl/payment")
        public ResponseEntity<?> getUser(@AuthenticationPrincipal UserAdapter user) {
          return ResponseEntity.ok()
              .contentType(MediaType.APPLICATION_JSON)
              .body(new UserDto(user.getId(), user.getName(), user.getLastName(), user.getEmail()));
        }
      
        @PostMapping(path = "api/auth/changepass")
        public ResponseEntity<?> changePass(@Valid @RequestBody PasswordChangeRequest newPassword,
                                            @AuthenticationPrincipal UserAdapter user ){
          if (userService.passwordsMatch(newPassword.getNew_password(), user.getPassword())) {
            throw new InsufficientPasswordException("The passwords must be different!");
          }
      
      
          return null;
        }
      }
    learner_created: true
  - name: src/account/businesslayer/UserService.java
    visible: true
    text: |
      package account.businesslayer;
      
      import account.persistencelayer.UserRepository;
      import jakarta.transaction.Transactional;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;
      import org.springframework.security.core.userdetails.UserDetails;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.stereotype.Service;
      
      import java.util.List;
      
      @Service
      public class UserService implements UserDetailsService {
      
        @Autowired UserRepository userRepository;
      
        public UserService(UserRepository userRepository) {
          this.userRepository = userRepository;
        }
      
        @Bean
        PasswordEncoder passwordEncoder() {
          return new BCryptPasswordEncoder(13);
        }
      
        public boolean emailExists(String email) {
          return userRepository.existsByEmail(email.toLowerCase());
        }
      
        public boolean passwordsMatch (String newPassword, String oldPassword) {
          return passwordEncoder().matches(newPassword, oldPassword);
        }
      
        public boolean passwordBreached(String newPassword) {
      
          List<String> breachedPassword = List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                  "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                  "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
          int i = 0;
          while (i < breachedPassword.size()) {
           if (passwordsMatch(newPassword, breachedPassword.get(i))) {
             return true;
           }
           i++;
          }
          return false;
        }
      
      
        @Transactional
        public User register(UserRegistrationRequest newUser) {
          User user = new User();
          user.setName(newUser.name());
          user.setLastName(newUser.lastname());
          user.setEmail(newUser.email());
          user.setPassword(passwordEncoder().encode(newUser.password()));
          userRepository.save(user);
          return user;
        }
      
        @Transactional
        public void updatePassword(String newPassword, UserAdapter user) {
         User updatedUser = userRepository
                 .findByEmail(user.getEmail())
                 .orElseThrow(() -> new UsernameNotFoundException(""));
         updatedUser.setPassword(newPassword);
         userRepository.save(updatedUser);
        }
      
      
        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
          User user =
              userRepository
                  .findByEmail(email.toLowerCase())
                  .orElseThrow(() -> new UsernameNotFoundException(("")));
          return new UserAdapter(user);
        }
      }
    learner_created: true
  - name: src/account/businesslayer/UserRegistrationRequest.java
    visible: true
    text: |
      package account.businesslayer;
      
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Pattern;
      
      public record UserRegistrationRequest(
          @NotBlank String name,
          @NotBlank String lastname,
          @NotBlank @Email @Pattern(regexp = "^(.+)@acme.com$") String email,
          @NotBlank String password) {}
    learner_created: true
  - name: src/account/businesslayer/PasswordUpdateDto.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/GlobalExceptionHandler.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/CustomErrorMessage.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/16603#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 02 Mar 2024 18:02:07 UTC"
record: 3
